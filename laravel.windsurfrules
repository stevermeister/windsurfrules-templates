# Laravel Project - Project Guidelines

## Project Overview
...Your project short description...

Built with Laravel following modern PHP practices and Laravel conventions.

## Development Guidelines

### Project Structure
- Follow Laravel's directory structure:
  - `app/` for application code
  - `config/` for configuration
  - `database/` for migrations/seeds
  - `resources/` for views/assets
  - `routes/` for route definitions
- Use proper namespace organization

### Architecture
- Follow Laravel best practices:
  - Use proper service containers
  - Implement repository pattern
  - Use proper facades
  - Follow SOLID principles
- Implement proper middleware
- Use proper event handling

### Coding Standards
- Follow PSR-12 standards
- Use proper type hints (PHP 8.2+)
- Implement proper validation
- Use proper error handling
- Follow Laravel conventions:
  - Proper model relationships
  - Proper query building
  - Proper route definitions

### Code Quality Tools
- Pre-commit hooks:
  - PHP_CodeSniffer
  - PHP CS Fixer
  - PHPStan
  - Pest/PHPUnit
- Additional checks:
  - Laravel Pint
  - Larastan
  - Security advisories
  - Dependency updates

### Development Environment

#### Requirements
- PHP version: 8.2+
- Composer: 2.x
- Laravel: 10.x
- Node.js: 20.x (for frontend)

#### Testing Requirements
- Pest/PHPUnit for testing
- Factory patterns
- Database testing
- Coverage threshold: 80%
- Feature and unit tests

#### Dependencies
Core dependencies:
- Laravel Framework
- Laravel Sanctum
- Laravel Telescope
- Laravel Horizon (if using Redis)
- Laravel Scout (if needed)

#### Production Requirements
- Use proper web server
- Configure proper queues
- Set up proper caching
- Implement proper logging
- Configure proper monitoring

### Database Guidelines
- Use proper migrations:
  - Proper column types
  - Proper indexes
  - Proper foreign keys
- Implement proper seeding
- Use proper model factories
- Follow naming conventions
- Implement proper relationships

### Security Guidelines
- Use proper authentication
- Implement proper authorization
- Configure proper CSRF
- Use proper input validation
- Follow security best practices

### Required Environment Variables
Environment variables in `.env`:
- APP_KEY
- DB_CONNECTION
- QUEUE_CONNECTION
- CACHE_DRIVER
- Other app-specific variables

Reference `.env.example` for required variables.

### Artisan Commands
- Create proper commands
- Use proper signatures
- Implement proper options
- Follow command conventions
- Use proper output formats

### Queue Guidelines
- Use proper job classes
- Implement proper dispatching
- Configure proper retries
- Use proper job middleware
- Implement proper error handling

### Cache Guidelines
- Use proper cache drivers
- Implement proper tagging
- Configure proper TTL
- Use proper cache keys
- Implement proper invalidation

### Frontend Guidelines
- Use Blade properly:
  - Proper components
  - Proper layouts
  - Proper partials
- Use proper asset compilation:
  - Vite configuration
  - Proper bundling
  - Proper optimization
- Implement proper JS/CSS organization

### API Guidelines
- Use proper API resources
- Implement proper versioning
- Use proper rate limiting
- Configure proper documentation
- Follow REST conventions
